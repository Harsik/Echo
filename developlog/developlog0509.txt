개발 1일차
정말 개발 1일차는 아니지만 spring security를 공부하면서
여러가지 실습 예제들을 작성해보고 spring에서 기본적인 샘플로
시작한 프로젝트도 만들어보고 oauth도 알아본 결과 이 토이 프로젝트를
만들기로 결정했다. 이 문서는 지금 모니터에 반에 알맞게 보이도록
줄바꿈을 하고 있는 중이다.
망할 oauth 이거 한번 해보겠다고 머리 들이 밀었다가 머리가 깨지는줄
알았다. 구조도 어려울 뿐만 아니라 resource server와 
authentication sever를 만드는 것이 상당히 고 난이도라 그전까지
spring security를 공부하던 나였지만 이해하기 어려웠고 결국
oauth는 google, sns 등 아이디 인증을 통한 프로젝트 개발이 답이기
때문에 규모가 너무 커져서 손 땠다.
결국 목표로 둔 front back 분리 authentication 인증 과정은 기존
spring security로 넘어 왔는데 이 프레임워크는 sessionid를 기준으로
authentication을 발급하기 때문에 front back server가 다르면 
sessionid를 서로 서버가 알지 못하기에 서로간에 accessToken을
만들어야 한다는 것을 깨달았다. 결국 accessToken을 만들어야한다면
security는 간소화 할 수 없고 기존에 작업했던 jwt와 다를바 없어지기
때문에 jwt가 더 효율적인것을 알 수 있다. 이 문서는 또한 나의 의식의 흐름에
따라 작성되기 때문에 글의 흐름이 부드럽지 못함을 알린다. 망할
토이 프로젝트를 시작할려니깐 정작 뭘 하고 싶은지 정의하기 힘들어
이 개발 일지를 적는다. 20190509 오전내내 oauth에 머리가 깨지고
오후에 들어서서 작업에 진척이 보이기 시작한다. 일단 front에서 
로그인 화면까지 작업이 되어 있기 때문에 back에서 jwt를 authentication
token으로 사용해 로그인 처리를 하는 기능을 구현할 것이다. 오늘 내로
못할 수도 있지만 시간이야 있으니 하지만 jwt는 기본적으로 spring security에서
제공하지 않는 기능이다. 그래서 security configration에서
jwt처리를 위한 filter를 추가한다. filter에서 fetch로 넘어온
파라미터 여기선 아이디와 비밀번호를 받고 UsernamePasswordAuthenticationToken를 생성한다
UsernamePasswordAuthenticationToken 객체가 생성되면 SecurityContextHolder에
저장 함으로써 이를 로그인 기준으로 삼는다. 서버에는 이 과정을 거치고
front에서 token으로 활용할 수 있도록 header에 bearer 타입의
jwt를 발급해 보내준다. 후에 front에서 온 요청에서 header의 authentication을
확인하고 jwt의 유효성 검사를 할 것이다. 조금 헷갈리는 부분이 있어
정정 할 부분이 있다. 로그인 처리는 authcontroller에서 UsernamePasswordAuthenticationToken을
생성하여 SecurityContextHolder 넣고 jwt를 response에 넣어 보내는
작업을 한다. 위 filter는 요청이 올때 마다 요청에 header를 확인하고
인증하는 작업을 한다. 그리고 이건 개인적인 얘기지만 마우스를 버티컬로
쓰고 근 한달이여서 느끼는 거지만 어깨가 매우매우 아프다. 이걸 내가
마우스를 바꾸고 나서야 느껴서 이 망할 마우스가 밉기만 하다.
빨리 집으로 보내야겠다. 하면서 DB구조를 좀 손봐야겠다 처음에는 귀찬아서
기존에 있는걸 쓸려고 했는데 생각해보니 내가 새로 프로젝트를 만드는
이유도 새로 짜서 배우고 익히기 위함이지 않는가 starUML를 다운받아서
작성해야겠다. starUML이 아니라 토마토가 어쩌고 였던것 같다. 
토마토시스템사의 eXERD다. 이 그지 같은 프로그램이 2019년 1월 이후로
개인 사용자가 쓸수 없도록 정책을 바꿨다. 다른걸로 e-r model 프로그램이
뭐가 있는지 찾아봣는데 starUML과 mysql workbench가 지원한다는 것을
알았다. 어쩌면 oauth가 될지도 모르겠지만 email을 로그인 할 수 있는 아이디로
그리고 password , 인덱스가 될 id 이렇게 셋으로 Account를 구성하기로 하였다.
signup을 개선하고 싶다. authorities가 되는 role_name이 많아봐야 
admin, manager, user 이 셋 같은데 따로 repository를 구성하는 것은 구조적으로
복잡해지고 자원이 낭비된다는 생각이 들어서 account내로 넣을려고 한다. 
예전 코드를 다시 살펴봤는데 유저하나에 권한이 여러개 들어갈 수 있도록
해놨다. 여태까지 계정 관리하는 시스템들을 보면 계정하나에 권한이 여러개
들어갈 수 있도록 한다. 나도 그렇게 하는게 좋을 듯. 지금 nomad corder
youtube 듣고 있는데 여기서 인터뷰 하는 영상에서 코드 리뷰 꼼꼼이 한다는
내용이 나와서 예전부터 내가 생각해 왔었던 이 코드는 왜 어떻게 무엇을
위해 작성해왔는지는 생각해둬야겠다. 아 젠장 기여코 오늘내로 못하는 군
내일 할일 뭔지 적어놓고 가야겠다. 현재 entity를 user와 role를 작성하였고
repository를 작성해야한다 repository 작성 후 이를 활용할 authcontroller를
작성해야 한다. controller 작성후 서버 실행 후 rest api가 정상적으로 작동하는지 
확인해야한다.
 