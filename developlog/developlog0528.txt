개발 14일차
하늘의 구름들이 점차 사라져가는 밝은 아침이다. 어제만해도 몸과 마음이 약해진듯이 우울하고 지친감이 있었지만
오늘은 저 구름 처럼 날아갔다. 아 또 개발일지를 일기처럼 쓴다. 목적에 맞게 사용해야지
망할 mysql 한글쓰기가 이렇게나 힘들다니 어제 반나절을 써야 겨우 문제를 해결 했다.
오늘은 어제 적은 기능들을 구현할 예정이다. 우선 제일 먼저 적혀 있는 페이징 ui를 변경하는 작업을 하겠다.
하는김에 search기능도 추가하였다. 그리고 정렬 기준을 이름이 아닌 updataAt기준으로 맞추는 것을 하자.
:pagination.sync에 대입한 pagination이라는 변수에 sortBy라는 항목이 어떤것을 정렬기준으로 할지 초기값을
제공할 수 있다. 다음 삭제 기능을 구현해보자. 삭제 기능을 생각해보니 두가지 선택지가 나온다. DB목록에서만
삭제를 할 것인가? 서버에서도 파일을 삭제 할 것인가? 내 경험상 서버에서 삭제를 잘 안한다. 기록을 남기기 
위해서인가 파일을 사용하지 않는 것으로 변경할 뿐이다. 나도 DB목록에서만 삭제 처리를 하자. 삭제 처리를
하는데도 문제가 있다. used라는 속성을 추가 하여 이것의 논리 값으로 삭제 처리를 할 것인가 아니면 진짜
DB 상에서 삭제 해 버릴 것인가이다. used 까지 쓰면 이중으로 기록을 남기는 것 같아 DB상에서 삭제해버리는것이
좋겠다. 정상적으로 제거는 되는데 catch를 통해서 error를 잡아낸다. SyntaxError: Unexpected end of JSON input
내 생각엔 응답할 것이 없어 그런 것 같다. .json()이 안되니 catch로 잡는 것 같다. 응답할 것을 내놓으니 
정상적으로 작동한다. 멀티 업로드와 멀티 다운로드는 밥먹고 구현해보자. 멀티 업로드는 기존에 있는 기능을 활용하여
vue에 맞춰 마이그레이션 하여 성공한 것을 확인 하였다. 하지만 여러개의 파일이 올라면서 페이징 기능이 제대로 작동
하지 않는 것을 보았다. 기본적으로 제공하는 페이징 기능은 작동하나 내가 추가해 넣은 기능은 제대로 작동하지 않았다.
sync 되어 있는 pagination을 console.log로 살펴보니 totalitems가 0인것을 확인하였다. 아이템은 확실히 있으나
0으로 적용되있는 걸로 봐선 제대로 아이템이 인식이 되지 않는 것 같다. 원인을 알아 볼려서 이것 저것 눌러보던 와중에
search에 입력하자 페이징이 제대로 뜨는걸 확인 할 수 있었다. search기능을 초기화하는 과정에서 데이터가 초기화된
모양이다. 아닌듯 싶다. search를 지워도 문제는 계속 있다. 내 생각은 이렇다. 초기값으로 totalitems을 파악하는 건 
가능하나 그 후 불러온 값에 대한 totalitems을 파악하지 못한다. 즉 바인드되어 있지 않다. 값을 불러올 때 pagination에
필요한 값을 입력하거나 pagination하기 전에 값을 입력해 놔야 가능할 것 같다. mount시점이 아닌 create 시점에 값을
불러오면 어떨까? 변하는 것이 없다. 라이플 사이클을 다시 살펴 보았다. created 이전에 observe data가 보인다.
이 이전 시점으로 즉 beforecreate시점에서 값을 불러 온다면 pagination이 될 것이다. 아에 입력되지 않았다.
created도 마찬가지 였다. 오직 mount시점이 가능했다. DOM이 마운팅 되기 전이기 때문에 element를 사용할 수 없기 때문인
듯 싶다. 그렇다면 남은 방법은 pagination에 필요한 값들을 입력하는 것이다. 와 세상에 일이 커진다. 그냥 기본기능을 
쓰면 페이징도 페이지수도 자동적으로 처리가 가능하다. 기본기능을 잘 사용하자. 좀 쉬었다가 멀티 다운로드를 구현해보자.
쉬면서 생각난건데 왜 동기화가 안될까? 의문이다. 내가 email check때와 같은 문제를 격고 있는게 아닐까 생각이 든다.
이전에 했던 것들을 되살펴 보자. 음 그래도 잘 모르겠다. 멀티 다운로드 구현해보자. 구현에 대해 선택지가 있다.
첫째 front에서 반복적으로 요청을 날리는 방법 이 방법은 반복 처리 부분은 front에서 함으로 server에 대한 부담이 덜하다는
점이 있겠지만 마치 양동이의 물을 컵으로 여러번 옮기는 것과 같다. 둘째로 uploadmultiple처럼 map으로 저장해 한번에 server로
보낸뒤 server에서 처리한다. 이건 이제 어떻게 해야 할지 구상을 해봐야한다. 역시 두번째안으로 가는게 낫겠다. 그런데 두번째
안이라도 지금 있는 기능들로 구성하자면 app(front)에게 여러번 response하는 것과 마찬가지다. 이걸 압축 파일로 만들어 
보낼 수는 없을까? 일단 ui 적 측면은 당장 할 수 있으니 해놓자. 응답시 response에 header와 body에 각각 파일을 다운로드 할 수 
있는 정보 하나씩을 배정 하는 것이라 응답 한번당 한번 다운로드라고 할 수 있다. 어쩌면 zip으로 만들어 다운로드를 할 수도 있겠다만
단일 파일, 복수 파일 다운로드를 구분하는 문제 부터 압축파일을 어떻게 만들 수 있는가에 대한 문제가 생긴다.
일단 요청은 한번 파일 다운로드 응답은 여러번 하는 방향으로 하고 있는데 다운로드 응답 한번으로 여러개의 파일을 다운로드 하게
할 수 있지 않을까? 멀티 다운로드 구현하는데 고려해야 할 사항들이 계속 해서 생긴다. 오늘은 여기까지 하고 내일 계속해보자.


