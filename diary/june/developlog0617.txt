개발 24일차
휴일동안에 생각난건데 내가 앞으로 할 일에 대해서 떠올렸다. 난 특별한 일 없으면 회사에서 추진하는 콜센터 어플리케이션 개발쪽으로 수주받고 
개발일을 지속할 것으로 보인다. 그렇다고 하면 콜센터 어플에 대해서 좀 더 자세히 파봐야되지 않을까란 생각이 들었다. 그야 김포쪽에서 일한
경험이 있어서 어플을 좀 파악했다고 할 수 있지만 전부는 아니라서 불안한 마음이 든다. 우선 콜센터 어플을 vscode로 실행 시키는 것부터 할려한다.
maven으로 build 및 package 후 tomcat에 publish하여 localhost:8080으로 접속하도록 만들었다. 실시간 컴파일까지는 아직 하지 않았지만
하다보니 문득 생각 난 것은 내가 하고있는 어플리케이션에 인터넷 전화 기능을 넣을 수 있는가? 궁금해졌다. 그래서 찾아봤는데 voip가 상당히
복잡하다는 것을 알았다. 아니 콜센터 기술 자체가 상당히 옛것이다. 폐쇄적이고 오픈소스가 거의 없다. 그리고 PBX부터 IVR, CTI 등등 
다양한 복잡한 서버들과 기계적인 전문 기술들이 상당히 많다. 내가 단순히 호기심으로 접근할 수 없을 것 같다. 다만 그 기계들로 부터
통신 메뉴얼을 사용해서 데이터를 주고 받는 건 할 수 있겠지만 그건 일단 기계들과 기계 기술이 있어야 하지 않는가. 상당히 어렵다.
오픈 소스로 voice chat 어플들을 좀 있지만 별 의미는 없을 것 같다. 일단 인상 깊은 것 하나를 적을 려고 한다. sipml5란 기술이 있다.
물론 오프소스이며 이것은 소셜 네트워크 (페이스 북, 트위터, Google+), 전자 상거래 웹 사이트, 전자 메일 서명에 통합을 위해 
자바 스크립트로 작성된 세계 최초의 오픈 소스 HTML5 SIP 클라이언트입니다. 라고 적혀 있다. 좀 더 자세히 알아볼 필요가 있겠지만
장 프로그램, 플러그인 또는 게이트웨이가 필요하지 않습니다. 미디어 스택은 WebRTC를 사용합니다. 라고 적혀있다. 이것은 클라이언트이므로
서버는 따로 있어야 한다. 서버에 대해서 또 찾아보니 sip란 개념이 보인다. SIP 전화는 VoIP 전화와 동일한  소프트웨어 전화입니다.
 IP 네트워크 또는 기존의 PSTN 네트워크를 통해 VoIP 호출을 위한 기술을 사용하는 전화기입니다. 
 컴퓨터를 이용하여 마이크로폰으로 사운드 카드와 헤드셋을 이용하여 전화를 사용할 수 있습니다. VoIP를 제공하는 광대역 연결 및 SIP 서버가 필요합니다.
  소프트웨어 SIP 전화는 또한 안드로이드와 아이폰과 같은 모바일 기기에서 실행할 수 있습니다. 라고 적혀 있다. 
이해한 것을 적자면 네트워크 상에 연결된 전화 교환기 같은 기능을 sip서버가 하고 있다고 할 수 있다. 클라이언트가 서버에 요청하듯이
전화통신을 sip서버에 요청하여 목적으로 하는 pc에 인터넷 전화를 걸게 도와주는 것이다. sip server opensource로는 opensips와 kamailio가 눈에 띈다.
그런데 pbx가 sip 서버역할도 하면서 Asterisk가 괜찮은 선택지로 떠올랐다. 오픈소스기도 하고 문제는 이걸 언제 파고 있냐 그말이다. 
쉽게 들어갈 수 없을 것 같다. 그냥 어떤 기술들이 가능성이 있는지 탐구하는 시간을 갖는 걸로 하겠다. sms 같은 문자 서비스는
통신사를 중간으로 서비스를 하는 것이기 때문에 당연 유료다 무료가 있을 지는 잘 모르겠지만 가능성을 희박하다. 찾아보니 같은 gateway를 공유하는
네트워크만 가능한 api가 있긴하다. 그러면 챗 기능은 어떨까? 이건 통신사를 거칠 필요도 없이 네트워크만 연결 되있으면 pc간 통신이 가능할 터이니
김포 콜센터 어플 reverse engineering 겸사 채팅 기능을 어떻게 구현했는지 알아보자. vscode로 어플을 여는데도 힘들다. tomcat 설정에 시간이 좀 걸렸다.
서버의 루트 설정이 어떤 식으로 작동하는지 몰랐는데 이번기회에 잘 알게 되었다. 홈페이지에서 로그인도 되고 디버그 콘솔에 로그도 잘 나오는 것을 
확인하였다. 다만 autodeploy 기능이 작동하지 않는다. 아마 내가 war를 지정해 놔서 그런듯 싶다. 찾아보니 가능할 수 있도록 방법이 있긴 한데
정 급하지 않으면 필요하지 않을 정도의 설치 방법이 적혀 있다. 궁금해서 결국 시도해 보긴했다. 설치도 하고 설정파일도 수정하고 했지만 
디버그 시 콘솔에 나온다는 hotswap이란 문구가 나오지 않은 걸로 봐선 제대로 설치가 되지 않을 것 같다. 오류 로그를 남기겠다.
[Tomcat 9.0]: Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
[Tomcat 9.0]: Unrecognized option: -XXaltjvm
이 정도로 하고 챗 기능을 한번 넣어 보려한다. 기능 구현을 위한 config, controller, model, lisetener를 각각 추가하였다.
여기서 잠깐 WebSocket이란 무엇인지 정확하게 집고 넘어가자. WebSocket이란? WebSocket이란 Transport protocol로 WebSocket은 서버와 클라이언트 간에 
socket connection을 유지해서 언제든 양방향 통신 또는 데이터 전송이 가능하도록 하는 기술이다. 소켓 연결을 유지하여 실시간 통신에 유리하다는 장점이 있다.
글을 한번 싹 읽어봤는데 이해 되지 않는 부분이 좀 있다. 한번 더 읽어봐야겠다. RabbitMQ에 대해서 궁금했었는데 MQ(Message Queing)중 하나로 
비동기 적인 통신 방법을 지원한다고 한다. 이러한 MQ를 오픈 소스에 기반한 표준 프로토콜을 AMQP(Advanced Message Queuing Protocol)라고 한다.
놀랍게도 spring boot는 AMQP를 종속성 추가만으로 MQ를 사용할 수 있다고 한다. 진짜 편하다.





 